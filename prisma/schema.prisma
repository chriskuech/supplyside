generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "relationJoins", "nativeDistinct", "postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Account {
  id   String @id @default(uuid()) @db.Uuid
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User[]
  Resource Resource[]
  Field    Field[]
  Schema   Schema[]
}

model User {
  id                   String    @id @default(uuid()) @db.Uuid
  accountId            String    @db.Uuid
  email                String    @unique
  firstName            String?
  lastName             String?
  tsAndCsSignedAt      DateTime?
  passwordHash         String?
  requirePasswordReset Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Value   Value[]
}

enum ResourceType {
  Line
  Item
  Order
  Invoice
  Vendor
}

model Resource {
  id        String       @id @default(uuid()) @db.Uuid
  accountId String       @db.Uuid
  type      ResourceType
  key       Int          @db.Integer
  revision  Int          @db.Integer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Account       Account         @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ResourceField ResourceField[]

  @@unique([accountId, type, key, revision])
}

model ResourceField {
  resourceId String @db.Uuid
  fieldId    String @db.Uuid
  valueId    String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Resource Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Field    Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Value    Value    @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([resourceId, fieldId])
}

enum FieldType {
  Checkbox
  Money
  Number
  Text
  RichText
  Select
  MultiSelect
  User
}

model Field {
  id          String    @id @default(uuid()) @db.Uuid
  accountId   String    @db.Uuid
  type        FieldType
  name        String
  isEditable  Boolean
  isVersioned Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Option             Option[]
  Account            Account         @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ResourceFieldValue ResourceField[]
  SchemaField        SchemaField[]
  SectionField       SectionField[]

  @@unique([accountId, name])
}

model Option {
  id      String @id @default(uuid()) @db.Uuid
  fieldId String @db.Uuid
  name    String @db.VarChar
  order   Int    @db.Integer

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Field       Field         @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Value       Value[]
  ValueOption ValueOption[]
}

model Value {
  id       String   @id @default(uuid()) @db.Uuid
  boolean  Boolean?
  number   Float?
  string   String?
  userId   String?  @db.Uuid
  optionId String?  @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User               User?           @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Option             Option?         @relation(fields: [optionId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  ValueOption        ValueOption[]
  ResourceFieldValue ResourceField[]
}

model ValueOption {
  valueId  String @db.Uuid
  optionId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Value  Value  @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Option Option @relation(fields: [optionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([valueId, optionId])
}

model Schema {
  id           String       @id @default(uuid()) @db.Uuid
  accountId    String       @db.Uuid
  resourceType ResourceType

  Account     Account       @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Section     Section[]
  SchemaField SchemaField[]

  @@unique([accountId, resourceType])
}

model Section {
  id       String @id @default(uuid()) @db.Uuid
  schemaId String @db.Uuid
  name     String
  order    Int    @db.Integer

  Schema       Schema         @relation(fields: [schemaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  SectionField SectionField[]
}

model SchemaField {
  schemaId String @db.Uuid
  fieldId  String @db.Uuid

  Schema Schema @relation(fields: [schemaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Field  Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([schemaId, fieldId])
}

model SectionField {
  sectionId String @db.Uuid
  fieldId   String @db.Uuid
  order     Int    @db.Integer

  Section Section @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Field   Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([sectionId, fieldId])
}
