name: CI

on:
  pull_request:
    branches: ["main"]
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ github.event_name != 'pull_request' }}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db # v3.6.1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: supplyside.azurecr.io
          username: supplyside-github-actions
          password: ${{ secrets.ACR_TOKEN }}

      - name: Create build.json
        shell: pwsh
        run: |
          $path = 'src/app/api/system/health/build.json'
          @{
            commit    = $env:SHA
            version   = $env:PR_NUMBER
            timestamp = "$(Get-Date -Format 's')Z"
          }
          | ConvertTo-Json
          | Set-Content -Path $path
          Get-Content -Path $path
        env:
          SHA: ${{ github.sha }}
          PR_NUMBER: ${{ github.event.pull_request.number }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85 # v6.7.0
        with:
          push: true
          tags: supplyside.azurecr.io/app:${{ github.sha }}
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name != 'pull_request' }}

    environment:
      name: Integration
      url: https://app-int.supplyside.io

    steps:
      - uses: actions/checkout@v4

      - name: Setup Tailscale
        uses: tailscale/github-action@main
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}

      - name: Run Prisma migrations
        run: |
          # Extract database connection details from DATABASE_URL
          USER=$(echo $DATABASE_URL | sed -r 's|postgresql://([^:]+):.*|\1|')
          PASSWORD=$(echo $DATABASE_URL | sed -r 's|postgresql://[^:]+:([^@]+)@.*|\1|')
          HOST=$(echo $DATABASE_URL | sed -r 's|postgresql://[^@]+@([^:]+):.*|\1|')
          PORT=$(echo $DATABASE_URL | sed -r 's|postgresql://[^@]+@[^:]+:([^/]+)/.*|\1|')
          DBNAME=$(echo $DATABASE_URL | sed -r 's|postgresql://[^/]+/(.+)|\1|')
          export PGPASSWORD=$PASSWORD

          # Rollback failed migration if any
          QUERY="SELECT migration_name FROM _prisma_migrations WHERE finished_at IS NULL ORDER BY started_at LIMIT 1;"
          FAILED_MIGRATION_NAME=$(psql -U $USER -h $HOST -p $PORT -d $DBNAME -t -c "$QUERY" | xargs)
          if [ -n "$FAILED_MIGRATION_NAME" ]; then
            echo "Rolling back failed migration: $FAILED_MIGRATION_NAME"
            npx prisma migrate resolve --rolled-back $FAILED_MIGRATION_NAME
          fi

          # Deploy new migration
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DB_SERVER_URL }}/integration

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: supplyside.azurecr.io
          username: supplyside-github-actions
          password: ${{ secrets.ACR_TOKEN }}

      - name: Push the Docker image to Docker Hub
        run: |
          docker pull supplyside.azurecr.io/app:${{ github.sha }}
          docker tag supplyside.azurecr.io/app:${{ github.sha }} supplyside.azurecr.io/app:integration
          docker push supplyside.azurecr.io/app:integration

      - name: Wait for healthcheck
        shell: pwsh
        run: |
          $timeoutInMinutes = 5
          $waitInSeconds = 10

          $timeout = (Get-Date).AddMinutes($timeoutInMinutes)

          do {
            Start-Sleep -Seconds $waitInSeconds
            Write-Host "~" -NoNewline

            $res = Invoke-RestMethod -Uri https://app-int.supplyside.io/api/system/health -Method Get -ErrorAction SilentlyContinue

            if ($res -and $res.build.commit -eq $env:GITHUB_SHA) {
              Write-Host "Deployment successful"
              exit 0
            }
          } while ((Get-Date) -lt $timeout)

          Write-Host "Deployment timed out after $timeoutInMinutes minutes"
          exit 1

        env:
          SHA: ${{ github.sha }}
